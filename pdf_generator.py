from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Table, TableStyle, Spacer, Frame, PageTemplate
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT
import os
from datetime import datetime

def generate_pdf(form_data, output_filename="output.pdf"):
    """
    Generate clean text-based prescription order PDF matching the provided format.
    """
    try:
        doc = SimpleDocTemplate(
            output_filename,
            pagesize=A4,
            rightMargin=0.75*inch, leftMargin=0.75*inch,
            topMargin=0.75*inch, bottomMargin=0.75*inch
        )
        
        styles = getSampleStyleSheet()
        
        # Create custom styles for clean text format
        alert_style = ParagraphStyle(
            'AlertStyle',
            parent=styles['Normal'],
            fontSize=14,
            alignment=TA_CENTER,
            spaceAfter=20,
            fontName='Helvetica-Bold'
        )
        
        label_style = ParagraphStyle(
            'LabelStyle',
            parent=styles['Normal'],
            fontSize=11,
            spaceAfter=6,
            spaceBefore=12,
            fontName='Helvetica-Bold'
        )
        
        value_style = ParagraphStyle(
            'ValueStyle',
            parent=styles['Normal'],
            fontSize=11,
            leftIndent=20,
            spaceAfter=6,
            fontName='Helvetica'
        )
        
        instructions_style = ParagraphStyle(
            'InstructionsStyle',
            parent=styles['Normal'],
            fontSize=11,
            spaceBefore=20,
            fontName='Helvetica'
        )
        
        elements = []

        # Alert at the top (centered, bold)
        alert_text = "Alert: This is a refill order generated by a patient from our Westmount pharmacy website, this is not a prescription"
        alert_para = Paragraph(alert_text, alert_style)
        elements.append(alert_para)

        # Patient Information Section
        # Name
        first_name = form_data.get('OR-Name', '')
        last_name = form_data.get('OR-Last-name', '')
        full_name = f"{first_name} {last_name}".strip()
        
        name_label = Paragraph("Name:", label_style)
        name_value = Paragraph(full_name, value_style)
        elements.append(name_label)
        elements.append(name_value)
        
        # Phone Number
        phone = form_data.get('OR-Phone-number', '')
        phone_label = Paragraph("Phone Number:", label_style)
        phone_value = Paragraph(phone, value_style)
        elements.append(phone_label)
        elements.append(phone_value)
        
        # Medication
        medication_label = Paragraph("Medication:", label_style)
        elements.append(medication_label)
        
        medication_text = form_data.get('OR-Medication', '')
        medications = [med.strip() for med in medication_text.split(',') if med.strip()]
        
        for medication in medications:
            med_para = Paragraph(medication, value_style)
            elements.append(med_para)
        
        # Delivery/Pickup Option
        delivery_option = form_data.get('delivery_option', '')
        delivery_label = Paragraph("Call when Ready (Pickup) or Delivery Option:", label_style)
        delivery_value = Paragraph(delivery_option, value_style)
        elements.append(delivery_label)
        elements.append(delivery_value)
        
        # Address
        address = form_data.get('address', '')
        if address:
            address_label = Paragraph("Address:", label_style)
            address_value = Paragraph(address, value_style)
            elements.append(address_label)
            elements.append(address_value)
        
        # Time Slot
        time_slot = form_data.get('time_slot', '')
        if time_slot:
            time_label = Paragraph("Time Slot:", label_style)
            time_value = Paragraph(time_slot, value_style)
            elements.append(time_label)
            elements.append(time_value)
        
        # Special Notes
        notes = form_data.get('OR-note', '')
        if notes:
            notes_label = Paragraph("Special Notes:", label_style)
            notes_value = Paragraph(notes, value_style)
            elements.append(notes_label)
            elements.append(notes_value)

        # Bottom Instructions
        instructions_text = "Please ensure you select CWR or Delivery time slot as priority (not pick up). Please call if there are any issues at all (no refills, on-order medication, backorder, clarification etc.)"
        instructions_para = Paragraph(instructions_text, instructions_style)
        elements.append(instructions_para)

        # Build the PDF
        doc.build(elements)
        print(f"✅ Clean prescription PDF generated: {os.path.abspath(output_filename)}")
        return output_filename

    except Exception as e:
        print(f"❌ PDF generation failed: {e}")
        raise


def generate_signup_pdf(form_data, output_filename="signup.pdf"):
    """
    Generate clean text-based patient registration PDF matching the provided format.
    
    Args:
        form_data: Dictionary containing signup form data
        output_filename: Output PDF filename
        
    Returns:
        Path to generated PDF file or None if failed
    """
    try:
        doc = SimpleDocTemplate(
            output_filename,
            pagesize=A4,
            rightMargin=0.75*inch, leftMargin=0.75*inch,
            topMargin=0.75*inch, bottomMargin=0.75*inch
        )
        
        styles = getSampleStyleSheet()
        
        # Create custom styles for clean text format (same as prescription)
        alert_style = ParagraphStyle(
            'AlertStyle',
            parent=styles['Normal'],
            fontSize=14,
            alignment=TA_CENTER,
            spaceAfter=20,
            fontName='Helvetica-Bold'
        )
        
        label_style = ParagraphStyle(
            'LabelStyle',
            parent=styles['Normal'],
            fontSize=11,
            spaceAfter=6,
            spaceBefore=12,
            fontName='Helvetica-Bold'
        )
        
        value_style = ParagraphStyle(
            'ValueStyle',
            parent=styles['Normal'],
            fontSize=11,
            leftIndent=20,
            spaceAfter=6,
            fontName='Helvetica'
        )
        
        instructions_style = ParagraphStyle(
            'InstructionsStyle',
            parent=styles['Normal'],
            fontSize=11,
            spaceBefore=20,
            fontName='Helvetica'
        )
        
        elements = []

        # Alert at the top (centered, bold)
        alert_text = "Alert: This is a patient registration form generated from our Westmount pharmacy website"
        alert_para = Paragraph(alert_text, alert_style)
        elements.append(alert_para)

        # Patient Information Section
        # Name
        first_name = form_data.get('first_name', '')
        last_name = form_data.get('last_name', '')
        full_name = f"{first_name} {last_name}".strip()
        
        name_label = Paragraph("Name:", label_style)
        name_value = Paragraph(full_name, value_style)
        elements.append(name_label)
        elements.append(name_value)
        
        # Email (optional field)
        email = form_data.get('email', '')
        if email:
            email_label = Paragraph("Email Address:", label_style)
            email_value = Paragraph(email, value_style)
            elements.append(email_label)
            elements.append(email_value)
        
        # Phone Number
        phone = form_data.get('phone', '')
        phone_label = Paragraph("Phone Number:", label_style)
        phone_value = Paragraph(phone, value_style)
        elements.append(phone_label)
        elements.append(phone_value)
        
        # Date of Birth
        dob = form_data.get('date_of_birth', '')
        if dob:
            dob_label = Paragraph("Date of Birth:", label_style)
            dob_value = Paragraph(dob, value_style)
            elements.append(dob_label)
            elements.append(dob_value)
        
        # Address Information
        address = form_data.get('address', '')
        area = form_data.get('area', '')  # This maps to Form-area
        
        if any([address, area]):
            address_label = Paragraph("Address Information:", label_style)
            elements.append(address_label)
            
            if address:
                address_value = Paragraph(f"Address: {address}", value_style)
                elements.append(address_value)
            
            if area:
                area_value = Paragraph(f"Area: {area}", value_style)
                elements.append(area_value)
        
        # Emergency Contact
        emergency_contact = form_data.get('emergency_contact', '')
        emergency_phone = form_data.get('emergency_phone', '')
        
        if any([emergency_contact, emergency_phone]):
            emergency_label = Paragraph("Emergency Contact:", label_style)
            elements.append(emergency_label)
            
            if emergency_contact:
                contact_name_value = Paragraph(f"Contact Name: {emergency_contact}", value_style)
                elements.append(contact_name_value)
            
            if emergency_phone:
                contact_phone_value = Paragraph(f"Contact Phone: {emergency_phone}", value_style)
                elements.append(contact_phone_value)
        
        # Special Notes
        notes = form_data.get('notes', '')
        if notes:
            notes_label = Paragraph("Special Notes:", label_style)
            notes_value = Paragraph(notes, value_style)
            elements.append(notes_label)
            elements.append(notes_value)

        # Bottom Instructions
        instructions_text = "Please call if there are any questions about this registration or if additional information is needed."
        instructions_para = Paragraph(instructions_text, instructions_style)
        elements.append(instructions_para)

        # Build PDF
        doc.build(elements)
        print(f"✅ Clean registration PDF generated: {os.path.abspath(output_filename)}")
        return output_filename
    except Exception as e:
        print(f"❌ Registration PDF generation failed: {e}")
        raise
