"""
PDF generation module for converting form data to PDF documents.
"""
import os
from fpdf import FPDF
import tempfile
from datetime import datetime
from typing import Dict, Any


class PDFGenerator:
    """Handles PDF generation from form data."""
    
    def __init__(self, save_dir: str = "generated_pdfs"):
        """
        Initialize PDF generator.
        
        Args:
            save_dir: Directory to save generated PDFs
        """
        self.save_dir = save_dir
        self._ensure_save_directory()
    
    def _ensure_save_directory(self):
        """Create save directory if it doesn't exist."""
        if not os.path.exists(self.save_dir):
            os.makedirs(self.save_dir)
    
    def generate_pdf(self, form_data: Dict[str, Any], save_permanently: bool = False) -> str:
        """
        Generate PDF from form data.
        
        Args:
            form_data: Dictionary containing form fields
            save_permanently: If True, saves PDF to permanent directory
            
        Returns:
            Path to generated PDF file
        """
        # Extract fields from form data
        first_name = form_data.get("OR-Name", "")
        last_name = form_data.get("OR-Last-name", "")
        phone = form_data.get("OR-Phone-number", "")
        medications = form_data.get("OR-Medication", "")
        notes = form_data.get("OR-note", "")
        delivery_option = form_data.get("delivery_option", "")
        address = form_data.get("address", "")
        time_slot = form_data.get("time_slot", "")

        # Create PDF
        pdf = FPDF()
        pdf.add_page()
        
        # Header
        pdf.set_font("Arial", "B", 14)
        pdf.multi_cell(0, 10, 
                      "Alert: This is a refill order generated by a patient from our Westmount pharmacy website, this is not a prescription", 
                      align="C")
        pdf.ln(8)

        # Patient Information
        self._add_patient_info(pdf, first_name, last_name, phone)
        
        # Medication Information
        self._add_medication_info(pdf, medications)
        
        # Delivery Information
        self._add_delivery_info(pdf, delivery_option, address, time_slot)
        
        # Special Notes
        self._add_notes(pdf, notes)
        
        # Footer
        self._add_footer(pdf)

        # Save PDF
        if save_permanently:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"{first_name}_{last_name}_{timestamp}.pdf"
            filepath = os.path.join(self.save_dir, filename)
            pdf.output(filepath)
        else:
            # Create temporary file
            with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as temp_pdf:
                pdf.output(temp_pdf.name)
                filepath = temp_pdf.name

        return filepath
    
    def _add_patient_info(self, pdf: FPDF, first_name: str, last_name: str, phone: str):
        """Add patient information section to PDF."""
        pdf.set_font("Arial", "B", 12)
        pdf.cell(30, 10, "Name:", ln=0)
        pdf.set_font("Arial", "", 12)
        pdf.cell(60, 10, first_name, ln=0)
        pdf.cell(60, 10, last_name, ln=1)

        pdf.set_font("Arial", "B", 12)
        pdf.cell(45, 10, "Phone Number:", ln=0)
        pdf.set_font("Arial", "", 12)
        pdf.cell(100, 10, phone, ln=1)

    def _add_medication_info(self, pdf: FPDF, medications: str):
        """Add medication information section to PDF."""
        pdf.set_font("Arial", "B", 12)
        pdf.cell(35, 10, "Medication:", ln=1)
        pdf.set_font("Arial", "", 12)
        
        meds = [m.strip() for m in medications.split(",") if m.strip()]
        if meds:
            for med in meds[:3]:  # up to 3 lines
                pdf.cell(10)
                pdf.cell(0, 10, med, ln=1)
        else:
            pdf.cell(10)
            pdf.cell(0, 10, "N/A", ln=1)

        pdf.ln(5)

    def _add_delivery_info(self, pdf: FPDF, delivery_option: str, address: str, time_slot: str):
        """Add delivery information section to PDF."""
        pdf.set_font("Arial", "B", 12)
        pdf.cell(70, 10, "Call when Ready (Pickup) or Delivery Option:", ln=1)
        pdf.set_font("Arial", "", 12)
        pdf.cell(10)
        pdf.cell(0, 10, delivery_option if delivery_option else "N/A", ln=1)

        pdf.set_font("Arial", "B", 12)
        pdf.cell(30, 10, "Address:", ln=0)
        pdf.set_font("Arial", "", 12)
        pdf.multi_cell(0, 10, address if address else "N/A")

        pdf.set_font("Arial", "B", 12)
        pdf.cell(30, 10, "Time Slot:", ln=0)
        pdf.set_font("Arial", "", 12)
        pdf.multi_cell(0, 10, time_slot if time_slot else "N/A")

    def _add_notes(self, pdf: FPDF, notes: str):
        """Add special notes section to PDF."""
        pdf.ln(5)
        pdf.set_font("Arial", "B", 12)
        pdf.cell(40, 10, "Special Notes:", ln=1)
        pdf.set_font("Arial", "", 12)
        pdf.multi_cell(0, 10, notes if notes else "N/A")

    def _add_footer(self, pdf: FPDF):
        """Add footer message to PDF."""
        pdf.ln(8)
        pdf.set_font("Arial", "B", 11)
        pdf.multi_cell(0, 10, 
                      "Please ensure you select CWR or Delivery time slot as priority (not pick up). Please call if there are any issues at all (no refills, on-order medication, backorder, clarification etc.)", 
                      align="C")
